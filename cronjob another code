<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use League\Csv\Reader;
use ZipArchive;
use App\Models\Brand;
use App\Models\Category;
use App\Models\Merchant;
use App\Models\Product;
use App\Models\Import;

class ProcessPendingImports extends Command
{
    protected $signature = 'app:process-pending-imports';
    protected $description = 'Process pending imports for all tenants';

    public function handle()
    {
        // Get all tenants
        $tenants = \App\Models\Tenant::all();

        foreach ($tenants as $tenant) {
            // $this->info("Running pending imports for tenant: {$tenant->id}");

            // Use the tenant->run() method which is the recommended approach
            $tenant->run(function () use ($tenant) {
                $this->info("Now in tenant database context");

                // Get pending imports for this tenant
                $pendingImports = Import::where('status', 'pending')->get();

                foreach ($pendingImports as $import) {
                    $import->update([
                        'status' => 'processing',
                        'log' => 'processing this file',
                    ]);
                }

                if ($pendingImports->isEmpty()) {
                    $this->info("No pending imports found for tenant {$tenant->id}");
                    return;
                }

                // $this->info("Found " . $pendingImports->count() . " pending imports to process");

                foreach ($pendingImports as $import) {
                    $this->processAwinImport($import);
                }
            });
        }

        return 0;
    }

    protected function processAwinImport($import)
    {
        $this->info("Starting Awin import for import ID {$import->id}");

        try {
            $import->update(['status' => 'processing']);

            // Get the zipUrl from the import model
            $zipUrl = $import->zip_url; // Adjust this based on your actual field name

            if (empty($zipUrl)) {
                Log::error("Missing zip URL for import ID: {$import->id}");
                $import->update([
                    'status' => 'failed',
                    'log' => 'Missing zip URL',
                ]);
                return;
            }

            $this->info("download process started");
            // Download ZIP file
            $zipContents = file_get_contents($zipUrl);
            $zipFileName = 'awinfeed_' . time() . '.zip';
            Storage::disk('local')->put($zipFileName, $zipContents);

            $zipPath = storage_path('app/' . $zipFileName);

            $this->info("zip Extract start");
            // Extract ZIP
            $zip = new ZipArchive;
            if ($zip->open($zipPath) === TRUE) {
                $extractFolder = storage_path('app/awinfeed_extract_' . time());
                mkdir($extractFolder, 0755, true);
                $zip->extractTo($extractFolder);
                $zip->close();
            } else {
                $errorMsg = 'Failed to open ZIP file.';
                Log::error($errorMsg);
                $import->update([
                    'status' => 'failed',
                    'log' => $errorMsg,
                ]);
                return;
            }

            // Find CSV file in extracted folder

            $this->info("Find CSV file in extracted folder");


            $csvFiles = glob($extractFolder . '/*.csv');
            if (empty($csvFiles)) {
                $errorMsg = 'No CSV file found inside ZIP.';
                Log::error($errorMsg);
                $import->update([
                    'status' => 'failed',
                    'log' => $errorMsg,
                ]);
                return;
            }
            $csvPath = $csvFiles[0];

            $this->info("Parse CSV");

            // Parse CSV
            $csv = Reader::createFromPath($csvPath, 'r');
            $csv->setDelimiter(';');
            $csv->setHeaderOffset(0);
            $records = $csv->getRecords();

            $importCount = 0;
            $index = 0;


            $this->info("record start imported");

            foreach ($records as $record) {
                // $this->info(json_encode($record, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE));

                try {
                    $index++;

                    // Log::info("Processing record #{$index}", $record);

                    // Validate essential fields
                    if (empty($record['aw_product_id'])) {
                        Log::warning("Skipping record #{$index} - missing aw_product_id");
                        continue;
                    }

                    // Initialize merchant, category, and brand as null
                    $merchant = $category = $brand = null;

                    if (!empty($record['brand_id'])) {
                        $brand = Brand::updateOrCreate(
                            ['brand_id' => $record['brand_id']],
                            [
                                'brand_name' => $record['brand_name'] ?? null,
                                'import_id' => $import->id ?? null
                            ]
                        );
                    }

                    if (!empty($record['category_id'])) {
                        $category = Category::updateOrCreate(
                            ['category_id' => $record['category_id']],
                            [
                                'category_name' => $record['category_name'] ?? null,
                                'import_id' => $import->id ?? null
                            ]
                        );
                    }

                    if (!empty($record['merchant_id'])) {
                        $merchant = Merchant::updateOrCreate(
                            ['merchant_id' => $record['merchant_id']],
                            [
                                'merchant_name' => $record['merchant_name'] ?? null,
                                'import_id' => $import->id ?? null
                            ]
                        );
                    }

                    if (!empty($record['aw_product_id'])) {

                        Product::updateOrCreate(
                            ['aw_product_id' => $record['aw_product_id']], // Match by AW product ID
                            [
                                'import_id' => $import->id ?? null,
                                'product_name' => $record['product_name'] ?? null,
                                'aw_deep_link' => $record['aw_deep_link'] ?? null,
                                'merchant_product_id' => $record['merchant_product_id'] ?? null,
                                'merchant_image_url' => $record['merchant_image_url'] ?? null,
                                'description' => $record['description'] ?? null,
                                'merchant_category' => $record['merchant_category'] ?? null,
                                'search_price' => $record['search_price'] ?? null,
                                'aw_image_url' => $record['aw_image_url'] ?? null,
                                'currency' => $record['currency'] ?? null,
                                'store_price' => $record['store_price'] ?? null,
                                'delivery_cost' => $record['delivery_cost'] ?? null,
                                'merchant_deep_link' => $record['merchant_deep_link'] ?? null,
                                'language' => $record['language'] ?? null,
                                'last_updated' => $record['last_updated'] ?? null,
                                'display_price' => $record['display_price'] ?? null,
                                'data_feed_id' => $record['data_feed_id'] ?? null,
                                'colour' => $record['colour'] ?? null,
                                'product_short_description' => $record['product_short_description'] ?? null,
                                'specifications' => $record['specifications'] ?? null,
                                'condition' => $record['condition'] ?? null,
                                'product_model' => $record['product_model'] ?? null,
                                'model_number' => $record['model_number'] ?? null,
                                'dimensions' => $record['dimensions'] ?? null,
                                'keywords' => $record['keywords'] ?? null,
                                'promotional_text' => $record['promotional_text'] ?? null,
                                'product_type' => $record['product_type'] ?? null,
                                'commission_group' => $record['commission_group'] ?? null,
                                'merchant_product_category_path' => $record['merchant_product_category_path'] ?? null,
                                'merchant_product_second_category' => $record['merchant_product_second_category'] ?? null,
                                'merchant_product_third_category' => $record['merchant_product_third_category'] ?? null,
                                'rrp_price' => $record['rrp_price'] ?? null,
                                'saving' => $record['saving'] ?? null,
                                'savings_percent' => $record['savings_percent'] ?? null,
                                'base_price' => $record['base_price'] ?? null,
                                'base_price_amount' => $record['base_price_amount'] ?? null,
                                'base_price_text' => $record['base_price_text'] ?? null,
                                'product_price_old' => $record['product_price_old'] ?? null,
                                'delivery_restrictions' => $record['delivery_restrictions'] ?? null,
                                'delivery_weight' => $record['delivery_weight'] ?? null,
                                'warranty' => $record['warranty'] ?? null,
                                'terms_of_contract' => $record['terms_of_contract'] ?? null,
                                'delivery_time' => $record['delivery_time'] ?? null,
                                'in_stock' => $record['in_stock'] ?? null,
                                'stock_quantity' => $record['stock_quantity'] ?? null,
                                'valid_from' => $record['valid_from'] ?? null,
                                'valid_to' => $record['valid_to'] ?? null,
                                'is_for_sale' => $record['is_for_sale'] ?? null,
                                'web_offer' => $record['web_offer'] ?? null,
                                'pre_order' => $record['pre_order'] ?? null,
                                'stock_status' => $record['stock_status'] ?? null,
                                'size_stock_status' => $record['size_stock_status'] ?? null,
                                'size_stock_amount' => $record['size_stock_amount'] ?? null,
                                'merchant_thumb_url' => $record['merchant_thumb_url'] ?? null,
                                'large_image' => $record['large_image'] ?? null,
                                'alternate_image' => $record['alternate_image'] ?? null,
                                'aw_thumb_url' => $record['aw_thumb_url'] ?? null,
                                'alternate_image_two' => $record['alternate_image_two'] ?? null,
                                'alternate_image_three' => $record['alternate_image_three'] ?? null,
                                'alternate_image_four' => $record['alternate_image_four'] ?? null,
                                'reviews' => $record['reviews'] ?? null,
                                'average_rating' => $record['average_rating'] ?? null,
                                'rating' => $record['rating'] ?? null,
                                'number_available' => $record['number_available'] ?? null,
                                'custom_1' => $record['custom_1'] ?? null,
                                'custom_2' => $record['custom_2'] ?? null,
                                'custom_3' => $record['custom_3'] ?? null,
                                'custom_4' => $record['custom_4'] ?? null,
                                'custom_5' => $record['custom_5'] ?? null,
                                'custom_6' => $record['custom_6'] ?? null,
                                'custom_7' => $record['custom_7'] ?? null,
                                'custom_8' => $record['custom_8'] ?? null,
                                'custom_9' => $record['custom_9'] ?? null,
                                'ean' => $record['ean'] ?? null,
                                'isbn' => $record['isbn'] ?? null,
                                'upc' => $record['upc'] ?? null,
                                'mpn' => $record['mpn'] ?? null,
                                'parent_product_id' => $record['parent_product_id'] ?? null,
                                'product_GTIN' => $record['product_GTIN'] ?? null,
                                'basket_link' => $record['basket_link'] ?? null,
                                'merchant_id' => isset($merchant) && isset($merchant->id) ? $merchant->id : null,
                                'category_id' => isset($category) && isset($category->id) ? $category->id : null,
                                'brand_id' => isset($brand) && isset($brand->id) ? $brand->id : null,
                            ]
                        );
                    }

                    $importCount++;
                } catch (\Exception $e) {
                    Log::error("Error on record #{$index}: " . $e->getMessage(), $record);
                    continue; // Skip to next record
                }
            }

            // Cleanup files
            unlink($zipPath);
            // Recursively delete extract folder
            $this->deleteDirectory($extractFolder);

            // Log::info("Awin feed import completed: {$importCount} products processed.");

            $import->update([
                'status' => 'completed',
                'log' => "Successfully imported {$importCount} products",
            ]);
        } catch (\Exception $e) {
            Log::error('ImportAwinFeedJob error: ' . $e->getMessage());
            $import->update([
                'status' => 'failed',
                'log' => $e->getMessage(),
            ]);
        }
    }

    /**
     * Recursively delete a directory
     */
    protected function deleteDirectory($dir)
    {
        if (!file_exists($dir)) {
            return true;
        }

        if (!is_dir($dir)) {
            return unlink($dir);
        }

        foreach (scandir($dir) as $item) {
            if ($item == '.' || $item == '..') {
                continue;
            }

            if (!$this->deleteDirectory($dir . DIRECTORY_SEPARATOR . $item)) {
                return false;
            }
        }

        return rmdir($dir);
    }

    
}
